
""" Python script _comp.py - Call gcc to compile the APSLIG project """


#### OPTIONS SECTION

# Debug
from sys import argv
debug = ("-d" in argv[1:]) or ("--debug" in argv[1:]) or False

# Binary output options
bin_output_name = "APSILG"
executable = True

# Compiling options
warnings = True

# Source insertion
source_insertion = True
srcinsert_read = "srcinsert.h"
srcinsert_write = "srcinsert.c"

# Directories options
bin_directory = "bin"
src_directory = "src"

# Link options
lib_links = []
math = True
sdl2 = True
opengl = True


#### COMPILING SECTION

# Compute some file path things
bin_file = bin_output_name
bin_file_path = bin_directory + "/" + bin_file

# Compute the compiler options list compiler_options
compiler_options = []
if executable:
	compiler_options.append("-no-pie")
if warnings:
	compiler_options.append("-Wextra -Wall")

# Import os for system interaction and file listing
import os

# Do the source insertion thing
if source_insertion:
	srcinsert_read_path = src_directory + "/" + srcinsert_read
	produced_code_fragments = []
	produced_code_fragments.append( "\n" \
		"/* Code generated by \"_comp.py\" at each compilation.\n" \
		" * The content of this file is overwritten at each compilation.\n" \
		" * See \"{}\" or \"_comp.py\". */\n\n".format(srcinsert_read))
	srcinsert = open(srcinsert_read_path, "r")
	for line in srcinsert.readlines():
		if line.startswith("SOURCE_INSERTION"):
			if debug: print("SOURCE INSERTION")
			filename = line.split("\"")[1]
			filepath = src_directory + "/" + filename
			if debug: print("file = \"{}\"".format(filename))
			vardecl = line.split("\",")[1].split(")")[0].strip()
			if debug: print("vardecl = \"{}\"".format(vardecl))
			file = open(filepath, "r")
			file_content = file.read()
			file_content = file_content.replace("\\", "\\\\")
			file_content = file_content.replace("\"", "\\\"")
			file_content = file_content.replace("\n", "\\n")
			file_content = file_content.replace("\t", "\\t")
			file.close()
			produced_code_fragments.append("" \
				"/* Content of the file \"{}\". */\n" \
				"{} = \"{}\";\n\n".format(filename, vardecl, file_content))
	srcinsert.close()
	srcinsert_write_path = src_directory + "/" + srcinsert_write
	srcinsert_dest = open(srcinsert_write_path, "w")
	srcinsert_dest.write("".join(produced_code_fragments))
	srcinsert_dest.close()

# List source file paths in src_file_paths
src_file_paths = []
for current_dir, dirs, files in os.walk(src_directory):
	for file in files:
		if file.split(".")[-1] == "c":
			src_file_paths.append(current_dir+"/"+file)

# Create the compiling command and run it
str_src_input_files = " ".join(src_file_paths)
str_bin_output_file = "-o "+bin_file_path
str_compiler_options = " ".join(compiler_options)
if sdl2: str_sdl = "`sdl2-config --cflags --libs`"
else: str_sdl = ""
if math: str_math = "-lm"
else: str_math = ""
if opengl: str_opengl = "-lGL -lGLEW"
else: str_opengl = ""
str_links = " ".join(["-l"+lib for lib in lib_links])
if debug: str_debug = "-DDEBUG"
else: str_debug = ""
command = " ".join((
	"gcc",
	str_src_input_files,
	str_bin_output_file,
	str_compiler_options,
	str_opengl,
	str_sdl,
	str_math,
	str_links,
	str_debug
))
print(command)
os.system(command)
